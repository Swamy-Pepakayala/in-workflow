# name: Workflow 1

# on:
#   workflow_dispatch:  # Manual trigger
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check for lock file
#         run: |
#           if [ -f lock ]; then
#             echo "Lock file found, waiting for it to be released."
#             ls -ltr  # List files for debugging
#             exit 1   # Exit with error to stop workflow
#           else
#             echo "No lock file found, proceeding."
#             touch lock  # Create the lock file
#             ls -ltr  # List files for debugging
#           fi
#   job1:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Step 1
#         run: |
#          echo "This is Workflow 1 - Job 1"
#          sleep 40 

#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - name: Step 1
#         run: echo "This is Workflow 1 - Job 2"

#       - name: Remove lock file
#         run: |
#           if [ -f lock ]; then
#             rm lock  # Remove the lock file if it exists
#           else
#             echo "No lock file to remove."
#           fi
        

name: Workflow 1

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run Job 1
        run: |
          echo "This is Workflow 1 - Job 1"
          sleep 40  # Simulate a long-running task

  trigger_workflow2:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Workflow 2
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: workflows } = await github.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const workflow2 = workflows.workflows.find(w => w.name === 'Workflow 2');
            if (workflow2) {
              await github.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow2.id,
                ref: 'main',
                inputs: {}
              });
            }
