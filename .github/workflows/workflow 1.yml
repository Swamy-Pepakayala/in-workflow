# # # name: Workflow 1

# # # on:
# # #   workflow_dispatch:  
# # # #  pus

# # # concurrency:
# # #   group: ci_workflow_group
# # #   cancel-in-progress: false

# # # jobs:
# # #   job1:
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Step 1
# # #         run: |
# # #          echo "This is Workflow 1 - Job 1"
# # #          sleep 10 

# # #   job2:
# # #     runs-on: ubuntu-latest
# # #     needs: job1
# # #     steps:
# # #       - name: Step 2
# # #         run: |
# # #          echo "This is Workflow 1 - Job 2"
# # #          sleep 10

# # #   job3:
# # #     runs-on: ubuntu-latest
# # #     needs: job1
# # #     steps:   
# # #       - name: Step 3
# # #         run: |
# # #          echo "This is Workflow 1 - Job 3"
# # #          sleep 20
# # #   job4:
# # #     runs-on: ubuntu-latest
# # #     needs: [job2,job3]
# # #     steps:     
# # #       - name: Step 4
# # #         run: echo "This is Workflow 1 - Job 4"
        
        

  

# # name: Workflow 1

# # on:
# #   workflow_dispatch:

# # jobs:
# #   lock_job:
# #     runs-on: self-hosted
# #     outputs:
# #       lock_acquired: ${{ steps.lock_status.outputs.lock_acquired }}
# #     steps:
# #       - name: Acquire lock
# #         id: lock_status
# #         run: |
# #           $lockFile = "C:\Temp\workflow.lock"
# #           while (Test-Path $lockFile) {
# #             echo "Another workflow is running. Waiting..."
# #             Start-Sleep -Seconds 10
# #           }
# #           New-Item -ItemType File -Path $lockFile
# #           echo "Lock acquired."
# #           echo "::set-output name=lock_acquired::true"

# #   job1:
# #     runs-on: self-hosted
# #     # needs: lock_job
# #     steps:
# #       - name: Step 1
# #         run: |
# #           echo "This is Workflow 1 - Job 1"
# #           Start-Sleep -Seconds 10

# #   job2:
# #     runs-on: self-hosted
# #     needs: [job1]
# #     steps:
# #       - name: Step 2
# #         run: |
# #           echo "This is Workflow 1 - Job 2"
# #           Start-Sleep -Seconds 10

# #   job3:
# #     runs-on: self-hosted
# #     needs: [job1]
# #     steps:   
# #       - name: Step 3
# #         run: |
# #           echo "This is Workflow 1 - Job 3"
# #           Start-Sleep -Seconds 20

# #   job4:
# #     runs-on: self-hosted
# #     needs: [job1]
# #     steps:     
# #       - name: Step 4
# #         run: echo "This is Workflow 1 - Job 4"

# #   release_lock:
# #     runs-on: self-hosted
# #     # needs: [job4]
# #     if: always()
# #     steps:
# #       - name: Release lock
# #         run: |
# #           $lockFile = "C:\Temp\workflow.lock"
# #           Remove-Item -Path $lockFile
# #           echo "Lock released."

# name: Workflow-1

# on:
#   workflow_dispatch:  

# jobs:
#   example-job1:
#     runs-on: self-hosted
#     steps:
#       - name: Acquire lock
#         id: acquire-lock
#         run: |
#           LOCK_FILE=/tmp/workflow.lock
#           while [ -f $LOCK_FILE ]; do
#             echo "Another workflow running. waiting..."
#             sleep 10
#           done
#           touch $LOCK_FILE
#       - name: Step 1
#         run: |
#          echo "This is Workflow 1 - Step 1"
#          cat /proc/sys/kernel/hostname
#          sleep 60
#       - name: Release lock
#         if: always()
#         run: |
#           LOCK_FILE=/tmp/workflow.lock
#           rm -f $LOCK_FILE

name: Workflow-1

on:
  workflow_dispatch:

concurrency:
  group: ci_workflow_group
  cancel-in-progress: false

jobs:
  acquire-lock:
    runs-on: self-hosted
    steps:
      - name: Acquire lock
        id: acquire-lock
        run: |
          LOCK_FILE=/tmp/workflow.lock
          while [ -f $LOCK_FILE ]; do
            echo "Another workflow running. waiting..."
            sleep 10
          done
          touch $LOCK_FILE
  job1:
    runs-on: self-hosted
    needs: acquire-lock
    steps:
      - name: Step 1
        run: |
          echo "This is Workflow 1 - Job 1"
          cat /proc/sys/kernel/hostname

  job2:
    runs-on: self-hosted
    needs: job1
    steps:
      - name: Step 2
        run: |
          echo "This is Workflow 1 - Job 2"
          cat /proc/sys/kernel/hostname

  job3:
    runs-on: self-hosted
    needs: job1
    steps:
      - name: Step 3
        run: |
          echo "This is Workflow 1 - Job 3"
          cat /proc/sys/kernel/hostname

  release-lock:
    runs-on: self-hosted
    needs: job3
    steps:
      - name: Release lock
        run: |
          LOCK_FILE=/tmp/workflow.lock
          rm -f $LOCK_FILE


