# # name: ParallelExecution

# # on:
#  #   workflow_dispatch:

# # jobs:
# #   job1:
# #     runs-on: self-hosted
# #     steps:
# #       - name: task1
# #         run: |
# #          echo "This is Workflow 3 - Job 1"
# #           sleep 10 
# #       - name: task2
# #         run: echo "Output from Job 1" > job1_output.txt
# #       - name: job1 output
# #         uses: actions/upload-artifact@v3
# #         with:
# #           name: job1-output
# #           path: job1_output.txt

# #   job2:
# #     runs-on: self-hosted
# #     steps:
# #       - name: Run Job 2
# #         run: echo "Output from Job 2" > job2_output.txt
# #       - name: Job2 Output
# #         uses: actions/upload-artifact@v3
# #         with:
# #           name: job2-output
# #           path: job2_output.txt

# #   job3:
# #     runs-on: self-hosted
# #     steps:
# #       - name: Download Job 1 Output
# #         uses: actions/download-artifact@v3
# #         with:
# #           name: job1-output
# #           path: ./job1_output
# #       - name: Wait for Job 1 Output
# #         shell: powershell
# #         run: |
# #           while (-Not (Test-Path -Path ./job1_output/job1_output.txt)) {
# #             Write-Host "Waiting for Job 1 output..."
# #             Start-Sleep -Seconds 10
# #           }
# #       - name: Run Job 3
# #         shell: powershell
# #         run: Get-Content ./job1_output/job1_output.txt

# #   job4:
# #     runs-on: self-hosted
# #     steps:
# #       - name: Download Job 2 Output
# #         uses: actions/download-artifact@v3
# #         with:
# #           name: job2-output
# #           path: ./job2_output
# #       - name: Wait for Job 2 Output
# #         shell: powershell
# #         run: |
# #           while (-Not (Test-Path -Path ./job2_output/job2_output.txt)) {
# #             Write-Host "Waiting for Job 2 output..."
# #             Start-Sleep -Seconds 10
# #           }
# #       - name: Run Job 5
# #         shell: powershell
# #         run: Get-Content ./job2_output/job2_output.txt


# name: Workflow 3

# on:
#   workflow_dispatch:
      
#   pull_request:
 

# concurrency:
#   group: ci_workflow_group
#   cancel-in-progress: false

# jobs:
#   job1:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Step 1
#         run: |
#          echo "This is Workflow 3 - Job 1"
#           sleep 30 
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - name: Step 1
#         run: echo "This is Workflow 3 - Job 2"

name: Workflow 3

on:
  workflow_dispatch:

jobs:
  lock_job:
    runs-on: self-hosted
    outputs:
      lock_acquired: ${{ steps.lock_status.outputs.lock_acquired }}
    steps:
      - name: Acquire lock
        id: lock_status
        run: |
          $lockFile = "C:\Temp\workflow.lock"
          while (Test-Path $lockFile) {
            echo "Another workflow is running. Waiting..."
            Start-Sleep -Seconds 10
          }
          New-Item -ItemType File -Path $lockFile
          echo "Lock acquired."
          echo "::set-output name=lock_acquired::true"

  job1:
    runs-on: self-hosted
    # needs: lock_job
    steps:
      - name: Step 1
        run: |
          echo "This is Workflow  3- Job 1"
          Start-Sleep -Seconds 10

  job2:
    runs-on: self-hosted
    needs: [job1]
    steps:
      - name: Step 2
        run: |
          echo "This is Workflow 3 - Job 2"
          Start-Sleep -Seconds 10

  job3:
    runs-on: self-hosted
    needs: [job1]
    steps:   
      - name: Step 3
        run: |
          echo "This is Workflow 3 - Job 3"
          Start-Sleep -Seconds 20

  job4:
    runs-on: self-hosted
    needs: [job1]
    steps:     
      - name: Step 4
        run: echo "This is Workflow 3 - Job 4"

  release_lock:
    runs-on: self-hosted
    # needs: [job4]
    if: always()
    steps:
      - name: Release lock
        run: |
          $lockFile = "C:\Temp\workflow.lock"
          Remove-Item -Path $lockFile

