# name: ParallelExecution

# on:
 #   workflow_dispatch:

# jobs:
#   job1:
#     runs-on: self-hosted
#     steps:
#       - name: task1
#         run: |
#          echo "This is Workflow 3 - Job 1"
#           sleep 10 
#       - name: task2
#         run: echo "Output from Job 1" > job1_output.txt
#       - name: job1 output
#         uses: actions/upload-artifact@v3
#         with:
#           name: job1-output
#           path: job1_output.txt

#   job2:
#     runs-on: self-hosted
#     steps:
#       - name: Run Job 2
#         run: echo "Output from Job 2" > job2_output.txt
#       - name: Job2 Output
#         uses: actions/upload-artifact@v3
#         with:
#           name: job2-output
#           path: job2_output.txt

#   job3:
#     runs-on: self-hosted
#     steps:
#       - name: Download Job 1 Output
#         uses: actions/download-artifact@v3
#         with:
#           name: job1-output
#           path: ./job1_output
#       - name: Wait for Job 1 Output
#         shell: powershell
#         run: |
#           while (-Not (Test-Path -Path ./job1_output/job1_output.txt)) {
#             Write-Host "Waiting for Job 1 output..."
#             Start-Sleep -Seconds 10
#           }
#       - name: Run Job 3
#         shell: powershell
#         run: Get-Content ./job1_output/job1_output.txt

#   job4:
#     runs-on: self-hosted
#     steps:
#       - name: Download Job 2 Output
#         uses: actions/download-artifact@v3
#         with:
#           name: job2-output
#           path: ./job2_output
#       - name: Wait for Job 2 Output
#         shell: powershell
#         run: |
#           while (-Not (Test-Path -Path ./job2_output/job2_output.txt)) {
#             Write-Host "Waiting for Job 2 output..."
#             Start-Sleep -Seconds 10
#           }
#       - name: Run Job 5
#         shell: powershell
#         run: Get-Content ./job2_output/job2_output.txt


# name: Workflow 3

# on:
#   workflow_dispatch:
      
#   pull_request:
 

# concurrency:
#   group: ci_workflow_group
#   cancel-in-progress: false

# jobs:
#   job1:
#     runs-on: self-hosted
#     steps:
#       - name: Step 1
#         run: |
#          echo "This is Workflow 3 - Job 1"
#           sleep 30 
#   job2:
#     runs-on: self-hosted
#     needs: job1
#     steps:
#       - name: Step 1
#         run: echo "This is Workflow 3 - Job 2"

name: Workflow 3

on:
  workflow_dispatch:
  pull_request:

# concurrency:
#   group: ci_workflow_group
#   cancel-in-progress: false

jobs:
  queue-pr:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Enqueue PR
        id: enqueue
        run: |
          PR_NUMBER=${{ github.event.pull_request.number || github.sha }}
          echo "Processing PR #$PR_NUMBER"

          # Example: Add PR to queue
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" \
            -d "{\"pr_number\": \"$PR_NUMBER\"}" \
            https://your-queue-management-system/api/add_to_queue)
          echo "Queue response: $RESPONSE"
          QUEUE_ID=$(echo $RESPONSE | jq -r '.queue_id')
          echo "Queue ID: $QUEUE_ID"
          echo "::set-output name=queue_id::$QUEUE_ID"

      - name: Wait for Turn
        run: |
          PR_NUMBER=${{ github.event.pull_request.number || github.sha }}
          QUEUE_ID=${{ steps.enqueue.outputs.queue_id }}
          while true; do
            STATUS=$(curl -s https://your-queue-management-system/api/check_status?queue_id=$QUEUE_ID)
            if [ "$STATUS" == "ready" ]; then
              echo "PR #$PR_NUMBER is ready to be processed"
              break
            fi
            echo "Waiting for PR #$PR_NUMBER's turn..."
            sleep 60
          done

  job1:
    runs-on: self-hosted
    needs: queue-pr
    steps:
      - name: Step 1
        run: |
          echo "This is Workflow 3 - Job 1"
          sleep 30 

  job2:
    runs-on: self-hosted
    needs: job1
    steps:
      - name: Ste

